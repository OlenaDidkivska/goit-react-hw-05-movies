{"version":3,"file":"static/js/137.b29a1c6b.chunk.js","mappings":"wRAIaA,EAAW,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC1C,OACE,UAAC,KAAD,YACE,gBACEC,IAAKD,GAAeE,EAAAA,EAAAA,IAAO,IAAKF,IAAgBG,EAAAA,EAAAA,IAAW,IAAK,KAChEC,IAAI,MAEN,uBAAIN,KACJ,uCAAeC,OAGpB,EC4BD,EArCa,WACX,OAAwBM,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAqBR,OAnBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,mCAAG,8GAESC,EAAAA,EAAAA,IAAgBN,EAASG,EAAWI,QAF7C,OAERC,EAFQ,OAGdC,QAAQC,IAAIF,GACa,KAAb,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUG,SACZZ,EAAQS,GALI,gDAQdC,QAAQC,IAAR,MARc,yDAAH,qDAYf,OADAL,IACO,WACLF,EAAWS,OACZ,CACF,GAAE,CAACZ,KAGF,SAAC,KAAD,WACO,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAMe,KAAI,gBAAGvB,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcsB,EAAlC,EAAkCA,GAAlC,OACT,SAACzB,EAAD,CAEEC,KAAMA,EACNC,UAAWA,EACXC,aAAcA,GAHTsB,EAFE,OAOL,8EAGX,C,kMCtCDC,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAiB,mCAAG,WAAMV,GAAN,gGAENQ,EAAAA,GAAAA,IAAA,sCAAyCC,GAAO,CACrET,OAAAA,IAH2B,cAEvBC,EAFuB,yBAMtBA,EAASU,KAAKC,SANQ,oCAQzBJ,EAAAA,GAAAA,SARyB,0CASpB,IAToB,cAWvB,IAAIK,MAAJ,MAXuB,yDAAH,sDAejBC,EAAY,mCAAG,WAAOC,EAAOC,EAAMhB,GAApB,gGAEDQ,EAAAA,GAAAA,IAAA,gCACIC,EADJ,iCACgCM,EADhC,iBAC8CC,EAD9C,wBAErB,CAAEhB,OAAAA,IAJoB,cAElBC,EAFkB,yBAOjBA,EAASU,MAPQ,oCASpBH,EAAAA,GAAAA,SAToB,0CAUf,IAVe,cAYlB,IAAIK,MAAJ,MAZkB,yDAAH,0DAgBZI,EAAe,mCAAG,WAAOxB,EAASO,GAAhB,gGAEJQ,EAAAA,GAAAA,IAAA,iBACXf,EADW,oBACQgB,EADR,mBAErB,CAAET,OAAAA,IAJuB,cAErBC,EAFqB,yBAOpBA,EAASU,MAPW,oCASvBH,EAAAA,GAAAA,SATuB,0CAUlB,IAVkB,cAYrB,IAAIK,MAAJ,MAZqB,yDAAH,wDAgBfd,EAAe,mCAAG,WAAON,EAASO,GAAhB,gGAEJQ,EAAAA,GAAAA,IAAA,iBACXf,EADW,4BACgBgB,EADhB,mBAErB,CAAET,OAAAA,IAJuB,cAErBC,EAFqB,OAM3BC,QAAQC,IAAIF,EAASU,KAAKpB,MANC,kBAOpBU,EAASU,KAAKpB,MAPM,oCASvBiB,EAAAA,GAAAA,SATuB,0CAUlB,IAVkB,cAYrB,IAAIK,MAAJ,MAZqB,yDAAH,wDAgBfK,EAAe,mCAAG,WAAOzB,EAASuB,EAAMhB,GAAtB,gGAEJQ,EAAAA,GAAAA,IAAA,iBACXf,EADW,4BACgBgB,EADhB,gCAC2CO,GAChE,CAAEhB,OAAAA,IAJuB,cAErBC,EAFqB,yBAOpBA,EAASU,MAPW,oCASvBH,EAAAA,GAAAA,SATuB,0CAUlB,IAVkB,cAYrB,IAAIK,MAAJ,MAZqB,yDAAH,yD","sources":["components/CastInfo/CastInfo.jsx","components/Cast/Cast.jsx","services/api.jsx"],"sourcesContent":["import { GridItem } from 'components/App.styled';\nimport { blankPhoto, imgSrc } from 'components/SharedLayout';\nimport PropTypes from 'prop-types';\n\nexport const CastInfo = ({ name, character, profile_path }) => {\n  return (\n    <GridItem>\n      <img\n        src={profile_path ? imgSrc(200, profile_path) : blankPhoto(200, 300)}\n        alt=\"\"\n      />\n      <p>{name}</p>\n      <p>Character: {character}</p>\n    </GridItem>\n  );\n};\n\nCastInfo.propTypes = {\n  name: PropTypes.string,\n  character: PropTypes.string,\n  profile_path: PropTypes.string,\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMovieCredits } from 'services/api';\nimport { CastInfo } from 'components/CastInfo/CastInfo';\nimport { Grid } from 'components/App.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchData = async () => {\n      try {\n        const response = await getMovieCredits(movieId, controller.signal);\n        console.log(response);\n        if (response?.length !== 0) {\n          setCast(response);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <Grid>\n      {cast?.map(({ name, character, profile_path, id }) => (\n        <CastInfo\n          key={id}\n          name={name}\n          character={character}\n          profile_path={profile_path}\n        />\n      )) && <p>We don't have any cast information for this movie</p>}\n    </Grid>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n// import { transformCountriesData, transformCountryData } from 'helpers';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = 'ce9ff11ff2b61f366eb027812f050c01';\n\nexport const getTrendingMovies = async signal => {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${KEY}`, {\n      signal,\n    });\n\n    return response.data.results;\n  } catch (error) {\n    if (axios.isCancel) {\n      return [];\n    }\n    throw new Error(error);\n  }\n};\n\nexport const searchMovies = async (query, page, signal) => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`,\n      { signal }\n    );\n\n    return response.data;\n  } catch (error) {\n    if (axios.isCancel) {\n      return [];\n    }\n    throw new Error(error);\n  }\n};\n\nexport const getMovieDetails = async (movieId, signal) => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}?api_key=${KEY}&language=en-US`,\n      { signal }\n    );\n\n    return response.data;\n  } catch (error) {\n    if (axios.isCancel) {\n      return [];\n    }\n    throw new Error(error);\n  }\n};\n\nexport const getMovieCredits = async (movieId, signal) => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`,\n      { signal }\n    );\n    console.log(response.data.cast);\n    return response.data.cast;\n  } catch (error) {\n    if (axios.isCancel) {\n      return [];\n    }\n    throw new Error(error);\n  }\n};\n\nexport const getMovieReviews = async (movieId, page, signal) => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=${page}`,\n      { signal }\n    );\n\n    return response.data;\n  } catch (error) {\n    if (axios.isCancel) {\n      return [];\n    }\n    throw new Error(error);\n  }\n};\n"],"names":["CastInfo","name","character","profile_path","src","imgSrc","blankPhoto","alt","useState","cast","setCast","movieId","useParams","useEffect","controller","AbortController","fetchData","getMovieCredits","signal","response","console","log","length","abort","map","id","axios","KEY","getTrendingMovies","data","results","Error","searchMovies","query","page","getMovieDetails","getMovieReviews"],"sourceRoot":""}